@using System.Drawing

<div style="width: 100%">
@Html.DevExpress().Chart(settings => {
    settings.Name = "ChartBalances";

    settings.BorderOptions.Visibility = DefaultBoolean.False;
    settings.Height = 480;
    settings.Width = 640;

    settings.Titles.Add(new ChartTitle() {
        Text = "История баланса",
        Font = new Font("Tahoma", 14)
    });

    settings.AnnotationRepository.AddTextAnnotation(a =>
    {
        a.AnchorPoint = new ChartAnchorPoint(0, 0);
        a.Border.Visibility = DefaultBoolean.False;
        a.ConnectorStyle = AnnotationConnectorStyle.None;
        a.Font = new Font("Tahoma", 10F);
        a.ShapePosition = new FreePosition() { DockCorner = DockCorner.RightBottom };
        a.Text = "From <href=https://eth.nanopool.org/account/0x13c90C011E0524793561dE63F2809Eb6723eb195</href>";
        a.TextColor = Color.Gray;
    });
    //settings.Titles.Add(new ChartTitle() {
    //    Text = "From https://eth.nanopool.org/account/0x13c90C011E0524793561dE63F2809Eb6723eb195",
    //    TextColor = Color.Gray,
    //    Font = new Font("Tahoma",8),
    //    Alignment = StringAlignment.Far,
    //    Dock = ChartTitleDockStyle.Bottom
    //});
    settings.Legends.Default(l => {

        l.Border.Visibility = DefaultBoolean.False;
        l.AlignmentVertical = LegendAlignmentVertical.BottomOutside;
        l.AlignmentHorizontal = LegendAlignmentHorizontal.Left;
        l.Margins.Left = 55;
        l.Direction = LegendDirection.LeftToRight;
    });

    settings.XYDiagram(d =>
    {
        d.Panes.Add(p => {
            p.Name = "VolumePane";
            p.Weight = 1.6;
        });
        d.Panes.Add(p =>
        {
            p.Name = "VolumeUsdPane";
            p.Weight = 1.6;
        });
        d.Panes.Default(p =>
        {
            p.Weight = 1.6;
            p.Visible = false;
        });
        d.AxisX.Visibility = DefaultBoolean.True ;

        d.AxisX.DateTimeScaleOptions.MeasureUnit = DateTimeMeasureUnit.Hour;
        d.AxisX.DateTimeScaleOptions.AutoGrid = true;
        d.AxisX.WholeRange.SideMarginsValue = 0;
        d.AxisX.SetVisibilityInPane(false, d.DefaultPane);
        d.AxisX.SetVisibilityInPane(false, d.Panes[0]);
        d.AxisX.SetVisibilityInPane(true, d.Panes[1]);
        d.AxisX.GridLines.Visible = true;
        d.AxisX.Interlaced = true;
        d.AxisX.Label.TextPattern = "{A:dd/MMM}";
        //d.AxisX.LabelVisibilityMode = AxisLabelVisibilityMode.AutoGeneratedAndCustom;
        d.AxisX.Label.Visible = true;
        d.AxisX.CustomLabels.Clear();


        //d.AxisY.WholeRange.AlwaysShowZeroLevel = false;
        //d.AxisY.GridLines.MinorVisible = true;
        //d.AxisY.Title.Text = "Ethirium, ETH";
        //d.AxisY.Title.Visibility = DefaultBoolean.True;
        //d.AxisY.Title.Font = new Font("Tahoma", 12);
        d.AxisY.Visibility = DefaultBoolean.False;

        d.SecondaryAxesY.Add(y =>
        {
            y.Name = "VolumeUsdAxis";
            y.ConstantLines.Add(cl =>
            {
                cl.AxisValue = 100;
                cl.ShowInLegend = false;
                cl.Title.Visible = false;
            });
            y.WholeRange.SideMarginsValue = 0;
            //y.WholeRange.SetMinMaxValues(0, 120);
            y.GridLines.Visible = true;
            y.GridLines.MinorVisible = true;
            y.Alignment = AxisAlignment.Near;
            y.Title.Text = "Dollars, $";
            y.Title.TextColor = Color.DarkGreen;
            y.Title.Visibility = DefaultBoolean.True;
            y.Title.Font = new Font("Tahoma", 12);
        });
        d.SecondaryAxesY.Add(y =>
        {
            y.Name = "VolumeAxis";
            //y.WholeRange.AlwaysShowZeroLevel = false;
            y.GridLines.Visible = true;
            y.GridLines.MinorVisible = true;
            y.Alignment = AxisAlignment.Far;
            y.Title.TextColor = Color.Blue;
            y.Title.Text = "Ethirium, ETH";
            y.Title.Visibility = DefaultBoolean.True;
            y.Title.Font = new Font("Tahoma", 12);
            y.LabelVisibilityMode = AxisLabelVisibilityMode.AutoGeneratedAndCustom;
            //y.Label.TextPattern = "{V:F3}";
        });

    });


    //settings.Legend.Title = "Eth";

    settings.Series.Add(s => {
        s.Name = "Eth";
        s.SetDataMembers("Date", "Volume");
        s.Views().LineSeriesView(v => {
            v.MarkerVisibility = DefaultBoolean.True;
            v.SeriesLabel(l =>
            {
                l.ResolveOverlappingMode = ResolveOverlappingMode.HideOverlapped;
                l.TextPattern = "{V:F4}";
            });
            settings.XYDiagram(d => {
                v.Pane = d.Panes["VolumePane"];
                v.AxisY = d.SecondaryAxesY["VolumeAxis"];
            });
            v.LineMarkerOptions.Size = 6;
        });
        s.ArgumentScaleType = ScaleType.Auto;
        s.LabelsVisibility = DefaultBoolean.True;
    });
    settings.Series.Add(s => {
        s.Name = "Dollar(USD)";
        s.SetDataMembers("Date", "VolumeUsd");
        s.ArgumentScaleType = ScaleType.DateTime;

        s.LabelsVisibility = DefaultBoolean.True;
        s.Views().LineSeriesView(v => {
            v.SeriesLabel(l => {
                l.ResolveOverlappingMode = ResolveOverlappingMode.HideOverlapped;
                l.TextPattern = "{V:F3}";
            });

            v.LineMarkerOptions.Size = 4;
            settings.XYDiagram(d =>
            {
                v.Pane = d.Panes["VolumeUsdPane"];
                v.AxisY = d.SecondaryAxesY["VolumeUsdAxis"];
            });
        });
    });


}).Bind(Model).GetHtml()

</div>